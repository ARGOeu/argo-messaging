(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{52:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return c})),a.d(n,"metadata",(function(){return l})),a.d(n,"rightToc",(function(){return o})),a.d(n,"default",(function(){return i}));var t=a(2),s=a(6),r=(a(0),a(89)),c={id:"api_schemas",title:"Schemas"},l={unversionedId:"api_schemas",id:"api_schemas",isDocsHomePage:!1,title:"Schemas",description:"Schemas is a resource that works with topics by validating the published messages.",source:"@site/docs/api_schemas.md",permalink:"/argo-messaging/docs/api_schemas",sidebar:"someSidebar",previous:{title:"API Operational Metrics",permalink:"/argo-messaging/docs/api_metrics"},next:{title:"Get API Version information",permalink:"/argo-messaging/docs/api_version"}},o=[{value:"GET Manage Schemas - Retrieve a Schema",id:"get-manage-schemas---retrieve-a-schema",children:[{value:"Request",id:"request",children:[]},{value:"Where",id:"where",children:[]},{value:"Example request",id:"example-request",children:[]},{value:"Responses",id:"responses",children:[]},{value:"Errors",id:"errors",children:[]}]},{value:"GET Manage Schemas - Retrieve All Schemas",id:"get-manage-schemas---retrieve-all-schemas",children:[{value:"Request",id:"request-1",children:[]},{value:"Where",id:"where-1",children:[]},{value:"Example request",id:"example-request-1",children:[]},{value:"Responses",id:"responses-1",children:[]},{value:"Errors",id:"errors-1",children:[]}]},{value:"POST Manage Schemas - Create new Schema",id:"post-manage-schemas---create-new-schema",children:[{value:"Supported Schema Types",id:"supported-schema-types",children:[]},{value:"Request",id:"request-2",children:[]},{value:"Where",id:"where-2",children:[]},{value:"Example request",id:"example-request-2",children:[]},{value:"Post body:",id:"post-body",children:[]},{value:"Responses",id:"responses-2",children:[]},{value:"Errors",id:"errors-2",children:[]}]},{value:"PUT Manage Schemas - Update Schema",id:"put-manage-schemas---update-schema",children:[{value:"Request",id:"request-3",children:[]},{value:"Where",id:"where-3",children:[]},{value:"Example request",id:"example-request-3",children:[]},{value:"Post body:",id:"post-body-1",children:[]},{value:"Responses",id:"responses-3",children:[]},{value:"Errors",id:"errors-3",children:[]}]},{value:"DELETE Manage Schemas - Delete Schema",id:"delete-manage-schemas---delete-schema",children:[{value:"Request",id:"request-4",children:[]},{value:"Where",id:"where-4",children:[]},{value:"Example request",id:"example-request-4",children:[]},{value:"Responses",id:"responses-4",children:[]},{value:"Errors",id:"errors-4",children:[]}]},{value:"POST Manage Schemas - Validate Message",id:"post-manage-schemas---validate-message",children:[{value:"Request",id:"request-5",children:[]},{value:"Where",id:"where-5",children:[]},{value:"Example request",id:"example-request-5",children:[]},{value:"Post body:",id:"post-body-2",children:[]},{value:"Responses",id:"responses-5",children:[]},{value:"Errors",id:"errors-5",children:[]}]}],p={rightToc:o};function i(e){var n=e.components,a=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},p,a,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Schemas is a resource that works with topics by validating the published messages."),Object(r.b)("h2",{id:"get-manage-schemas---retrieve-a-schema"},"[GET]"," Manage Schemas - Retrieve a Schema"),Object(r.b)("p",null,"This request retrieves a specific schema under the given project"),Object(r.b)("h3",{id:"request"},"Request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'GET "/v1/projects/{project_name}/schemas/{schema_name}"\n')),Object(r.b)("h3",{id:"where"},"Where"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"project_name: Name of the project in which the schema will belong"),Object(r.b)("li",{parentName:"ul"},"schema_name: Name of the schema to be created")),Object(r.b)("h3",{id:"example-request"},"Example request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'curl -X GET -H "Content-Type: application/json"\n " https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T"\n')),Object(r.b)("h3",{id:"responses"},"Responses"),Object(r.b)("p",null,"If successful, the response contains the requested schema."),Object(r.b)("p",null,"Success Response\n",Object(r.b)("inlineCode",{parentName:"p"},"200 OK")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'{\n    "uuid": "50811bd1-c94c-4ad7-8f55-a561c6270b50",\n    "name": "projects/project-1/schemas/schema-1",\n    "type": "json",\n    "schema": {\n        "properties": {\n            "address": {\n                "type": "string"\n            },\n            "email": {\n                "type": "string"\n            },\n            "name": {\n                "type": "string"\n            },\n            "telephone": {\n                "type": "string"\n            }\n        },\n        "required": [\n            "name",\n            "email"\n        ],\n        "type": "object"\n    }\n}\n')),Object(r.b)("h3",{id:"errors"},"Errors"),Object(r.b)("p",null,"Please refer to section ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"/argo-messaging/docs/api_errors"}),"Errors")," to see all possible Errors"),Object(r.b)("h2",{id:"get-manage-schemas---retrieve-all-schemas"},"[GET]"," Manage Schemas - Retrieve All Schemas"),Object(r.b)("p",null,"This request retrieves all schemas under the given project."),Object(r.b)("h3",{id:"request-1"},"Request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'GET "/v1/projects/{project_name}/schemas"\n')),Object(r.b)("h3",{id:"where-1"},"Where"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"project_name: Name of the project in which the schema will belong")),Object(r.b)("h3",{id:"example-request-1"},"Example request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'curl -X GET -H "Content-Type: application/json"\n " https://{URL}/v1/projects/project-1/schemas?key=S3CR3T"\n')),Object(r.b)("h3",{id:"responses-1"},"Responses"),Object(r.b)("p",null,"If successful, the response contains all the schemas of the given project."),Object(r.b)("p",null,"Success Response\n",Object(r.b)("inlineCode",{parentName:"p"},"200 OK")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'{\n  "schemas": [\n  {\n    "uuid": "50811bd1-c94c-4ad7-8f55-a561c6270b50",\n    "name": "projects/project-1/schemas/schema-1",\n    "type": "json",\n    "schema": {\n        "properties": {\n            "address": {\n                "type": "string"\n            },\n            "email": {\n                "type": "string"\n            },\n            "name": {\n                "type": "string"\n            },\n            "telephone": {\n                "type": "string"\n            }\n        },\n        "required": [\n            "name",\n            "email"\n        ],\n        "type": "object"\n    }\n  },\n  {\n    "uuid": "50811bd1-c94c-4ad7-8f55-a561c6270b55",\n    "name": "projects/project-1/schemas/schema-2",\n    "type": "json",\n    "schema": {\n        "properties": {\n            "address": {\n                "type": "string"\n            },\n            "email": {\n                "type": "string"\n            },\n            "name": {\n                "type": "string"\n            },\n            "telephone": {\n                "type": "string"\n            }\n        },\n        "required": [\n            "name",\n            "email"\n        ],\n        "type": "object"\n    }\n  }\n ]\n}\n')),Object(r.b)("h3",{id:"errors-1"},"Errors"),Object(r.b)("p",null,"Please refer to section ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"/argo-messaging/docs/api_errors"}),"Errors")," to see all possible Errors"),Object(r.b)("h2",{id:"post-manage-schemas---create-new-schema"},"[POST]"," Manage Schemas - Create new Schema"),Object(r.b)("p",null,"This request creates a new schema"),Object(r.b)("h3",{id:"supported-schema-types"},"Supported Schema Types"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"JSON,AVRO")),Object(r.b)("h3",{id:"request-2"},"Request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'POST "/v1/projects/{project_name}/schemas/{schema_name}"\n')),Object(r.b)("h3",{id:"where-2"},"Where"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"project_name: Name of the project in which the schema will belong"),Object(r.b)("li",{parentName:"ul"},"schema_name: Name of the schema to be created")),Object(r.b)("h3",{id:"example-request-2"},"Example request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'curl -X POST -H "Content-Type: application/json -d POSTDATA"\n " https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T"\n')),Object(r.b)("h3",{id:"post-body"},"Post body:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "json",\n  "schema":{\n        "type": "object",\n         "properties": {\n          "name":        { "type": "string" },\n          "email":        { "type": "string" },\n          "address":    { "type": "string" },\n          "telephone": { "type": "string" }\n         },\n        "required": ["name", "email"]\n  }\n}\n')),Object(r.b)("h3",{id:"responses-2"},"Responses"),Object(r.b)("p",null,"If successful, the response contains the newly created schema."),Object(r.b)("p",null,"Success Response\n",Object(r.b)("inlineCode",{parentName:"p"},"200 OK")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'{\n    "uuid": "50811bd1-c94c-4ad7-8f55-a561c6270b50",\n    "name": "projects/project-1/schemas/schema-1",\n    "type": "json",\n    "schema": {\n        "properties": {\n            "address": {\n                "type": "string"\n            },\n            "email": {\n                "type": "string"\n            },\n            "name": {\n                "type": "string"\n            },\n            "telephone": {\n                "type": "string"\n            }\n        },\n        "required": [\n            "name",\n            "email"\n        ],\n        "type": "object"\n    }\n}\n')),Object(r.b)("h3",{id:"errors-2"},"Errors"),Object(r.b)("p",null,"Please refer to section ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"/argo-messaging/docs/api_errors"}),"Errors")," to see all possible Errors"),Object(r.b)("h2",{id:"put-manage-schemas---update-schema"},"[PUT]"," Manage Schemas - Update Schema"),Object(r.b)("p",null,"This request updates the contents of a schema. You can update ",Object(r.b)("inlineCode",{parentName:"p"},"one")," or ",Object(r.b)("inlineCode",{parentName:"p"},"all")," of the fields at a time."),Object(r.b)("h3",{id:"request-3"},"Request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'PUT "/v1/projects/{project_name}/schemas/{schema_name}"\n')),Object(r.b)("h3",{id:"where-3"},"Where"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"project_name: Name of the project under which the schema belongs"),Object(r.b)("li",{parentName:"ul"},"schema_name: Name of the schema to be updated")),Object(r.b)("h3",{id:"example-request-3"},"Example request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'curl -X PUT -H "Content-Type: application/json -d POSTDATA"\n " https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T"\n')),Object(r.b)("h3",{id:"post-body-1"},"Post body:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "json",\n  "name": "projects/project-1/schemas/new-name",\n  "schema":{\n        "type": "object",\n         "properties": {\n          "name":        { "type": "string" },\n          "email":        { "type": "string" },\n          "address":    { "type": "string" },\n          "telephone": { "type": "string" }\n         },\n        "required": ["name", "email", "address"]\n  }\n}\n')),Object(r.b)("h3",{id:"responses-3"},"Responses"),Object(r.b)("p",null,"If successful, the response contains the updated schema."),Object(r.b)("p",null,"Success Response\n",Object(r.b)("inlineCode",{parentName:"p"},"200 OK")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'{\n    "uuid": "50811bd1-c94c-4ad7-8f55-a561c6270b50",\n    "name": "projects/project-1/schemas/new-name",\n    "type": "json",\n    "schema": {\n        "properties": {\n            "address": {\n                "type": "string"\n            },\n            "email": {\n                "type": "string"\n            },\n            "name": {\n                "type": "string"\n            },\n            "telephone": {\n                "type": "string"\n            }\n        },\n        "required": [\n            "name",\n            "email",\n            "address"\n        ],\n        "type": "object"\n    }\n}\n')),Object(r.b)("h3",{id:"errors-3"},"Errors"),Object(r.b)("p",null,"Please refer to section ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"/argo-messaging/docs/api_errors"}),"Errors")," to see all possible Errors"),Object(r.b)("h2",{id:"delete-manage-schemas---delete-schema"},"[DELETE]"," Manage Schemas - Delete Schema"),Object(r.b)("p",null,"This request deletes a schema."),Object(r.b)("h3",{id:"request-4"},"Request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'DELETE "/v1/projects/{project_name}/schemas/{schema_name}"\n')),Object(r.b)("h3",{id:"where-4"},"Where"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"project_name: Name of the project under which the schema belongs"),Object(r.b)("li",{parentName:"ul"},"schema_name: Name of the schema to be deleted")),Object(r.b)("h3",{id:"example-request-4"},"Example request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'curl -X DELETE -H "Content-Type: application/json"\n " https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T"\n')),Object(r.b)("h3",{id:"responses-4"},"Responses"),Object(r.b)("p",null,"If successful, the response is empty."),Object(r.b)("p",null,"Success Response\n",Object(r.b)("inlineCode",{parentName:"p"},"200 OK")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),"")),Object(r.b)("h3",{id:"errors-4"},"Errors"),Object(r.b)("p",null,"Please refer to section ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"/argo-messaging/docs/api_errors"}),"Errors")," to see all possible Errors"),Object(r.b)("h2",{id:"post-manage-schemas---validate-message"},"[POST]"," Manage Schemas - Validate Message"),Object(r.b)("p",null,"This request is used whenever we want to test a message against a schema.\nThe process to check that your schema and messages are working as expected is to create\na new topic that needs to be associated with the schema, then create the message in bas64 encoding and\npublish it to the topic.Instead of creating all this pipeline in order to check your schema and messages\nwe can explicitly do it on this API call."),Object(r.b)("h3",{id:"request-5"},"Request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'POST "/v1/projects/{project_name}/schemas/{schema_name}:validate"\n')),Object(r.b)("h3",{id:"where-5"},"Where"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"project_name: Name of the project under which the schema belongs"),Object(r.b)("li",{parentName:"ul"},"schema_name: Name of the schema to be updated")),Object(r.b)("h3",{id:"example-request-5"},"Example request"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'curl -X POST -H "Content-Type: application/json -d POSTDATA"\n " https://{URL}/v1/projects/project-1/schemas/schema-1:validate?key=S3CR3T"\n')),Object(r.b)("h3",{id:"post-body-2"},"Post body:"),Object(r.b)("h4",{id:"json-schema"},"JSON Schema"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'{\n  "name": "name1",\n  "email": "e1@example.com",\n  "address": "address1",\n  "telephone": "6980574421"\n}\n')),Object(r.b)("h4",{id:"avro-schema"},"AVRO Schema"),Object(r.b)("p",null,"When dealing with an AVRO Schema, the binary message needs to be encoded to ",Object(r.b)("inlineCode",{parentName:"p"},"base64"),"\nalongside its ",Object(r.b)("inlineCode",{parentName:"p"},"schema")," and sent via the ",Object(r.b)("inlineCode",{parentName:"p"},"data")," field which is required."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'{\n  "data": "DGFnZWxvc8T8Cg=="\n}\n')),Object(r.b)("h3",{id:"responses-5"},"Responses"),Object(r.b)("p",null,"Success Response\n",Object(r.b)("inlineCode",{parentName:"p"},"200 OK")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'{\n    "message": "Message validated successfully"\n}\n')),Object(r.b)("h3",{id:"errors-5"},"Errors"),Object(r.b)("p",null,"Please refer to section ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"/argo-messaging/docs/api_errors"}),"Errors")," to see all possible Errors"))}i.isMDXComponent=!0},89:function(e,n,a){"use strict";a.d(n,"a",(function(){return b})),a.d(n,"b",(function(){return d}));var t=a(0),s=a.n(t);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function c(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?c(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,s=function(e,n){if(null==e)return{};var a,t,s={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var p=s.a.createContext({}),i=function(e){var n=s.a.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},b=function(e){var n=i(e.components);return s.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},h=s.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),b=i(a),h=t,d=b["".concat(c,".").concat(h)]||b[h]||m[h]||r;return a?s.a.createElement(d,l(l({ref:n},p),{},{components:a})):s.a.createElement(d,l({ref:n},p))}));function d(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,c=new Array(r);c[0]=h;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:t,c[1]=l;for(var p=2;p<r;p++)c[p]=a[p];return s.a.createElement.apply(null,c)}return s.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);