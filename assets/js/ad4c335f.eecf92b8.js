"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2177],{3905:(e,s,t)=>{t.d(s,{Zo:()=>l,kt:()=>d});var r=t(7294);function i(e,s,t){return s in e?Object.defineProperty(e,s,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[s]=t,e}function n(e,s){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);s&&(r=r.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var s=1;s<arguments.length;s++){var t=null!=arguments[s]?arguments[s]:{};s%2?n(Object(t),!0).forEach((function(s){i(e,s,t[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(t,s))}))}return e}function o(e,s){if(null==e)return{};var t,r,i=function(e,s){if(null==e)return{};var t,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],s.indexOf(t)>=0||(i[t]=e[t]);return i}(e,s);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],s.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),c=function(e){var s=r.useContext(u),t=s;return e&&(t="function"==typeof e?e(s):a(a({},s),e)),t},l=function(e){var s=c(e.components);return r.createElement(u.Provider,{value:s},e.children)},p={inlineCode:"code",wrapper:function(e){var s=e.children;return r.createElement(r.Fragment,{},s)}},b=r.forwardRef((function(e,s){var t=e.components,i=e.mdxType,n=e.originalType,u=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),b=c(t),d=i,h=b["".concat(u,".").concat(d)]||b[d]||p[d]||n;return t?r.createElement(h,a(a({ref:s},l),{},{components:t})):r.createElement(h,a({ref:s},l))}));function d(e,s){var t=arguments,i=s&&s.mdxType;if("string"==typeof e||i){var n=t.length,a=new Array(n);a[0]=b;var o={};for(var u in s)hasOwnProperty.call(s,u)&&(o[u]=s[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var c=2;c<n;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},3217:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const n={id:"subscriber_guide",title:"Subscriber Guide",sidebar_position:2},a=void 0,o={unversionedId:"guides/subscriber_guide",id:"guides/subscriber_guide",title:"Subscriber Guide",description:"Subscribers can read messages from named-channels called Subscriptions.  Each subscription can belong to a single topic. A topic though can have multiple subscriptions.",source:"@site/docs/guides/subscriber_guide.md",sourceDirName:"guides",slug:"/guides/subscriber_guide",permalink:"/argo-messaging/docs/guides/subscriber_guide",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"subscriber_guide",title:"Subscriber Guide",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Publisher Guide",permalink:"/argo-messaging/docs/guides/publisher"},next:{title:"Receiving messages using Pull",permalink:"/argo-messaging/docs/guides/subscriber-pull_guide"}},u={},c=[{value:"Before you start",id:"before-you-start",level:2},{value:"Pull vs Push Subscriptions",id:"pull-vs-push-subscriptions",level:2},{value:"Pull subscriptions",id:"pull-subscriptions",level:3},{value:"Push subscriptions",id:"push-subscriptions",level:3}],l={toc:c};function p(e){let{components:s,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:s,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Subscribers can read messages from named-channels called Subscriptions.  Each subscription can belong to a single topic. A topic though can have multiple subscriptions.\nIf you are a subscriber and you want to receive messages published to a topic, the idea is that you should create a subscription to that topic.\nThe subscription is the connection of the topic to a specific application, and its function is to receive and process messages published to the topic.\nOnly messages published to the topic after the subscription is created are available to subscriber applications. "),(0,i.kt)("h2",{id:"before-you-start"},"Before you start"),(0,i.kt)("p",null,"In order to get an account on the ARGO Messaging Service, submit a request through the ",(0,i.kt)("a",{parentName:"p",href:"https://ams-register.argo.grnet.gr"},"ARGO Messaging Service account form")),(0,i.kt)("p",null,"Upon account approval, you will receive information via e-mail about your new project along with an API token."),(0,i.kt)("h2",{id:"pull-vs-push-subscriptions"},"Pull vs Push Subscriptions"),(0,i.kt)("p",null,"AMS supports both push and pull message delivery. In push delivery, the Messaging Service initiates requests to your subscriber application to deliver messages. In pull delivery, your subscription application initiates requests to the Pub/Sub server to retrieve messages."),(0,i.kt)("h3",{id:"pull-subscriptions"},"Pull subscriptions"),(0,i.kt)("p",null,"Pull subscriptions can be configured to require that message deliveries are acknowledged by the Subscribers. If an acknowledgement is made, subscription can resume progressing and send the next available messages. If no acknowledgement is made subscription pauses progressing and re-sends the same messages. In a pull subscription, the subscribing application explicitly calls the API pull method, which requests delivery of a message in the subscription queue. The Pub/Sub server responds with the message (or an error if the queue is empty), and an ack ID. The subscriber then explicitly calls the acknowledge method, using the returned ack ID, to acknowledge receipt."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GUIDE")," ",(0,i.kt)("a",{parentName:"p",href:"/argo-messaging/docs/guides/subscriber-pull_guide"},"Receiving Messages via Pull")),(0,i.kt)("h3",{id:"push-subscriptions"},"Push subscriptions"),(0,i.kt)("p",null,'In a push subscription, the push server sends a request to the subscriber application, at a preconfigured endpoint. The subscriber\'s HTTP response serves as an implicit acknowledgement: a success response indicates that the message has been successfully processed and the Pub/Sub system can delete it from the subscription; a non-success response indicates that the Pub/Sub server should resend it (implicit "nack"). To ensure that subscribers can handle the message flow, the Pub/Sub dynamically adjusts the flow of requests and uses an algorithm to rate-limit retries. The push server(s) are an optional set of worker-machines that are needed when the AMS wants to support push enabled subscriptions. It allows to decouple the push functionality from AMS api nodes They perform the push functionality for the messages of a push enabled subscription (consume->deliver\u2192ack)/ Provide a gRPC interface in order to communicate with their api Provide subscription runtime status'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GUIDE")," ",(0,i.kt)("a",{parentName:"p",href:"/argo-messaging/docs/guides/subscriber-push_guide"},"Receiving Messages via Push")))}p.isMDXComponent=!0}}]);