"use strict";(self.webpackChunkargo_messaging=self.webpackChunkargo_messaging||[]).push([[715],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4919:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"api_basic",title:"Service introduction and configuration"},s=void 0,c={unversionedId:"api_basic",id:"api_basic",title:"Service introduction and configuration",description:"Introduction",source:"@site/docs/api_basic.md",sourceDirName:".",slug:"/api_basic",permalink:"/argo-messaging/docs/api_basic",draft:!1,tags:[],version:"current",frontMatter:{id:"api_basic",title:"Service introduction and configuration"},sidebar:"someSidebar",previous:{title:"Initial Project & User Management",permalink:"/argo-messaging/docs/projects_users"},next:{title:"API Errors",permalink:"/argo-messaging/docs/api_errors"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration file: config.json",id:"configuration-file-configjson",level:2},{value:"Explanation of config parameters:",id:"explanation-of-config-parameters",level:3},{value:"Command line parameters",id:"command-line-parameters",level:2}],d={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The ARGO Messaging Service API implements the Google PubSub specification and thus supports HTTP RPC-style methods in the form of:"),(0,o.kt)("p",null," ",(0,o.kt)("inlineCode",{parentName:"p"},"https://messaging.argo.grnet.gr/api/projects/METHOD")),(0,o.kt)("p",null,"All methods must be called using HTTPS. Arguments can be passed as GET or POST params, or a mix. The response contains a ",(0,o.kt)("inlineCode",{parentName:"p"},"200 OK")," for a successful request and a JSON object in case of an error. For failure results, the error property will contain a short machine-readable error code. In the case of problematic calls,  during handling user\u2019s request the API responds using a predefined schema (described in chapter Errors), that contains a short machine-readable warning code, an error code and an error description  (or list of them, in the case of multiple errors)."),(0,o.kt)("p",null,"Each user is authenticated by adding the url parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"?key=T0K3N")," in each API request"),(0,o.kt)("h2",{id:"configuration-file-configjson"},"Configuration file: config.json"),(0,o.kt)("p",null,"The first step for using the messaging API is to edit the main configuration file."),(0,o.kt)("p",null,"The ARGO Messaging Service main configuration file is config.json. An example configuration is listed below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "bind_ip":"",\n  "port":8080,\n  "zookeeper_hosts":["localhost"],\n  "kafka_znode":"",\n  "store_host":"localhost",\n  "store_db":"argo_msg",\n  "certificate":"/etc/pki/tls/certs/localhost.crt",\n  "certificate_key":"/etc/pki/tls/private/localhost.key",\n  "per_resource_auth":true,\n  "service_token":"S0M3T0K3N",\n  "log_level":"INFO",\n  "log_facilities": ["syslog", "console"]\n}\n')),(0,o.kt)("h3",{id:"explanation-of-config-parameters"},"Explanation of config parameters:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"bind_ip"),(0,o.kt)("td",{parentName:"tr",align:null},"the ip address to listen to.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"port"),(0,o.kt)("td",{parentName:"tr",align:null},"The port where the API will listen to")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"zookeeper_hosts"),(0,o.kt)("td",{parentName:"tr",align:null},"List of zookeeper instances that are used to sync kafka")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"kafka_znode"),(0,o.kt)("td",{parentName:"tr",align:null},'The znode under which Kafka writes its data on Zookeeper. Default is "" meaning the root node')),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"store_host"),(0,o.kt)("td",{parentName:"tr",align:null},"Address:port of the datastore server")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"store_db"),(0,o.kt)("td",{parentName:"tr",align:null},"Database name used on the datastore server")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"certificate"),(0,o.kt)("td",{parentName:"tr",align:null},"path to the node's TLS certificate file")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"certificate_key"),(0,o.kt)("td",{parentName:"tr",align:null},"path to the certificate's private key")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"per_resource_auth"),(0,o.kt)("td",{parentName:"tr",align:null},"enable authorization per resource (topic/subscription)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"service_token"),(0,o.kt)("td",{parentName:"tr",align:null},"(optional) If set, enables full service-wide access to the api to initialize projects,users and resources")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"log_level"),(0,o.kt)("td",{parentName:"tr",align:null},'set the desired log level (defaults to "INFO")')),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"log_facilities"),(0,o.kt)("td",{parentName:"tr",align:null},"logging output, if left empty, it defaults to console)")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Location of config.json"),": API will look first for config.json locally in the folder where the executable runs and then in the ",(0,o.kt)("inlineCode",{parentName:"p"}," /etc/argo-messaging/"),"  location."),(0,o.kt)("h2",{id:"command-line-parameters"},"Command line parameters"),(0,o.kt)("p",null,"Apart from configuration file, argo-messaging service accepts configuration parameters in the command line. The list of the available command line parameters is displayed\nif the user issues"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./argo-messaging-service --help\n")),(0,o.kt)("p",null,"The available command line parameters are listed as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'--bind-ip string           ip address to listen to (default "localhost")\n--certificate string       certificate file *.crt (default "/etc/pki/tls/certs/localhost.crt")\n--certificate-key string   certificate key file *.key (default "/etc/pki/tls/private/localhost.key")\n--config-dir string        directory path to an alternative json config file\n--kafka-znode string       kafka zookeeper node name\n--log-level string         set the desired log level\n--per-resource-auth        enable per resource authentication (default true)\n--port int                 port number to listen to (default 8080)\n--service-key string       service token definition for immediate full api access\n--store-db string          datastore (mongodb) database name (default "argo_msg")\n--store-host string        datastore (mongodb) host (default "localhost")\n--zookeeper-hosts value    list of zookeeper hosts to connect to (default [localhost])\n')),(0,o.kt)("p",null,"User can optionally specifiy an alternative configuration file directory with the use of the ",(0,o.kt)("inlineCode",{parentName:"p"},"--config-dir")," parameter\nFor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./argo-messaging-service --config-dir=/root/alternative/config/\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"/root/alternative/config/config.json")," must exist"))}f.isMDXComponent=!0}}]);