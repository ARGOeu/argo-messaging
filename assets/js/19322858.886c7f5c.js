"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3493],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,d=u["".concat(c,".").concat(m)]||u[m]||p[m]||s;return n?r.createElement(d,i(i({ref:t},g),{},{components:n})):r.createElement(d,i({ref:t},g))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7057:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const s={id:"use_cases",title:"Use cases",sidebar_position:1},i="Use cases for the Argo Messaging Service",o={unversionedId:"use_cases/use_cases",id:"use_cases/use_cases",title:"Use cases",description:"The integration between different core services using the ARGO Messaging Service (AMS) as transport layer was one of our",source:"@site/docs/use_cases/use_cases.md",sourceDirName:"use_cases",slug:"/use_cases/",permalink:"/argo-messaging/docs/use_cases/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"use_cases",title:"Use cases",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Use Cases",permalink:"/argo-messaging/docs/category/use-cases"},next:{title:"Training Material",permalink:"/argo-messaging/docs/category/training-material"}},c={},l=[{value:"AAI Federation Registry Integration",id:"aai-federation-registry-integration",level:3},{value:"Live Updates through our Mattermost integration",id:"live-updates-through-our-mattermost-integration",level:3}],g={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"use-cases-for-the-argo-messaging-service"},"Use cases for the Argo Messaging Service"),(0,a.kt)("p",null,"The integration between different core services using the ARGO Messaging Service (AMS) as transport layer was one of our\nmain goals. The main services are:"),(0,a.kt)("p",null,"1) ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"EOSC Marketplace (beta)")),": It uses the AMS Service to exchange information about the\norders."),(0,a.kt)("p",null,"2) ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"AAI Federation Registry (beta)")),": It uses the AMS Service to exchange information with the different\ndeployers (ex, SimpleSamlPhp, Mitre Id, Keycloak)."),(0,a.kt)("p",null,"3) ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Operations Portal")),": Reads the alarms from predefined topics, stores\nthem in a database and displays them in the operations portal."),(0,a.kt)("p",null,"4) ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Accounting")),": Use of AMS as a transport layer for\ncollecting accounting data from the Sites. The accounting information is gathered from different collectors into a\ncentral accounting repository where it is processed to generate statistical summaries that are available through the\nEGI Accounting Portal."),(0,a.kt)("p",null,"5) ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"FedCloud")),": Use of AMS as a transport layer of the cloud information system. It makes use of the\nams-authN. The entry point for users, topics and subscriptions is GOCDB."),(0,a.kt)("p",null,"6) ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"ARGO Availability and Reliability Monitoring\nService")),": It uses the AMS service to send the messages from the monitoring engine to other components."),(0,a.kt)("h3",{id:"aai-federation-registry-integration"},"AAI Federation Registry Integration"),(0,a.kt)("p",null,"The Federation Registry is a portal designed to manage service providers (SPs). It enables service owners to configure\nfederated access for their services using the OIDC and SAML protocols by providing a centralized location for managing\nthe service configuration.\nAccess management is handled by a different component which can differ based on the installation (Keycloak, SSP,\nMitreID). Service configurations have to be updated on the Access Managment component every time a change is made using\nthe Federation Registry Portal.\nArgo messaging is the message-oriented middleware technology that is used for this communication between the two\nparties.\nThe use of Argo Messaging Service allows for:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"Flexibility")),": It enables interoperability and integration between different components and systems, regardless of\ntheir\nunderlying technologies or platforms."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"Asynchronous communication")),": Messages can be sent and received at different times and speeds, without blocking or\nwaiting\nfor a response. This improves the responsiveness throughout the system."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"Security")),": It provides built-in security features, such as authentication, authorization, encryption, and digital\nsignatures, which help protect the confidentiality, integrity, and authenticity of the messages exchanged between the\nFederation Registry and the given Component.")),(0,a.kt)("p",null,"Federation Registry has multiple instances and with the integration of the Argo Messaging Service we have managed to\norganise and monitor\ncommunication between our components.\nConfiguring Argo Messaging and managing topics and subscription was made easy through the use of AMS Admin Ui app and\nthrough the API."),(0,a.kt)("h3",{id:"live-updates-through-our-mattermost-integration"},"Live Updates through our Mattermost integration"),(0,a.kt)("p",null,"While the Argo Messaging Service is primarily used for scenarios\nwhere data is being published by one entity and consumed by another,\nin order for systems to achieve async event based workflows,the existence\nof ",(0,a.kt)("a",{parentName:"p",href:"/argo-messaging/docs/api_advanced/api_subscriptions#push-enabled-subscriptions"},"push enabled subscriptions"),", gives the ability\nto the system itself,\nto forward messages to remote destination when they arrive, without having clients\nconstantly asking for new data."),(0,a.kt)("p",null,"One use case of this flow, is the ability to deliver data to a specific\nmattermost channel."),(0,a.kt)("p",null,"We have an ",(0,a.kt)("a",{parentName:"p",href:"/argo-messaging/docs/guides/mattermost-integration_guide"},"mattermost example")," that mirrors a real use case\nwhere we needed to filter and reformat\nspecific messages that were actual alerts, that also needed to be delivered\nto a mattermost channel in order for issues to be handled as fast as possible."))}p.isMDXComponent=!0}}]);